---
- name: Install required packages
  apt:
    update_cache: yes
    name:
      - parted
      - e2fsprogs
      - dosfstools
    state: present

- name: Download VyOS ISO release
  copy:
    src: "{{ vyos_iso_file }}"
    dest: "{{ vyos_iso_local }}"

- name: Mount ISO
  mount:
    name: "{{ CD_ROOT }}"
    src: "{{ vyos_iso_local }}"
    fstype: iso9660
    opts: loop,ro
    state: mounted

- name: Verify checksums of all the files in the ISO image
  command: md5sum -c md5sum.txt
  args:
    chdir: "{{ CD_ROOT }}"
  changed_when: False

- name: Mount squashfs image from ISO
  mount:
    name: "{{ CD_SQUASH_ROOT }}"
    src: "{{ SQUASHFS_IMAGE }}"
    fstype: squashfs
    opts: loop,ro
    state: mounted

- name: Read version string from iso packages
  shell: cat {{ CD_SQUASH_ROOT }}/opt/vyatta/etc/version | awk '{print $2}' | tr + -
  register: version_string

- name: Debug version string as read from ISO
  debug: msg="This is version {{ version_string.stdout }}"

- name: Create BIOS compatible partition
  parted:
    device: "{{ volume_drive }}"
    state: present
    label: gpt
    number: 1
    name: ""
    part_start: 34s
    part_end: 2047s
    flags: [bios_grub]

- name: Create ESP partition
  parted:
    device: "{{ volume_drive }}"
    state: present
    label: gpt
    number: 2
    name: ""
    part_start: 2048s
    part_end: 526335s
    flags: [boot, esp]

- name: Create OS root partition
  parted:
    device: "{{ volume_drive }}"
    state: present
    label: gpt
    number: 3
    name: ""
    part_start: 526336s
    part_end: 100%

- name: Create a filesystem on ESP partition
  filesystem:
    fstype: "{{ ESP_FSTYPE }}"
    device: "{{ ESP_PARTITION }}"
    opts: "-n EFI -F 32"

- name: Create a filesystem on root partition
  filesystem:
    fstype: "{{ ROOT_FSTYPE }}"
    device: "{{ ROOT_PARTITION }}"
    opts: "-L persistence"

- name: Mount root partition
  mount:
    name: "{{ WRITE_ROOT }}"
    src: "{{ ROOT_PARTITION }}"
    fstype: "{{ ROOT_FSTYPE }}"
    state: mounted

# ---- Install image from ISO ----

- name: Create {{ WRITE_ROOT }} directories
  file:
    path: "{{ WRITE_ROOT }}/boot/{{ version_string.stdout }}/rw"
    state: directory
    recurse: true
  register: RW_DIR

- name: Create the work directory
  file:
    path: "{{ WRITE_ROOT }}/boot/{{ version_string.stdout }}/work"
    state: directory
    recurse: true

- name: Copy squashfs image from ISO to root partition
  command: cp -p {{ SQUASHFS_IMAGE }} {{ WRITE_ROOT }}/boot/{{ version_string.stdout }}/{{ version_string.stdout }}.squashfs
  args:
    creates: "{{ WRITE_ROOT }}/boot/{{ version_string.stdout }}/{{ version_string.stdout }}.squashfs"

- name: Copy boot files (kernel and initrd images) from ISO to root partition
  shell: find {{ CD_SQUASH_ROOT }}/boot -maxdepth 1  \( -type f -o -type l \) -print -exec cp -dp {} {{ WRITE_ROOT }}/boot/{{ version_string.stdout }}/ \;
  args:
    creates: "{{ WRITE_ROOT }}/boot/{{ version_string.stdout }}/vmlinuz"

- name: Mount squashfs image from root partition
  mount:
    name: "{{ READ_ROOT }}"
    src: "{{ WRITE_ROOT }}/boot/{{ version_string.stdout }}/{{ version_string.stdout }}.squashfs"
    fstype: squashfs
    opts: loop,ro
    state: mounted

- name: Set up union root for post installation tasks
  mount:
    name: "{{ INSTALL_ROOT }}"
    src: none
    fstype: overlay
    opts: "noatime,lowerdir={{ READ_ROOT }},upperdir={{ RW_DIR.path }},workdir={{ WRITE_ROOT }}/boot/{{ version_string.stdout }}/work"
    state: mounted

# ---- Post image installation tasks ----

    ## ---- VyOS configuration ----

- name: Make sure that config partition marker exists
  file:
    path: "{{ INSTALL_ROOT }}/opt/vyatta/etc/config/.vyatta_config"
    state: touch

- name: Copy the default config for EC2 to the installed image
  template:
    src: templates/config.boot.default.ec2
    dest: "{{ INSTALL_ROOT }}/opt/vyatta/etc/config/config.boot"
    mode: 0755

    ## ---- Install GRUB boot loader ----

- name: Create GRUB directory
  file:
    path: "{{ WRITE_ROOT }}/boot/grub"
    state: directory
    recurse: true

- name: Create EFI directory
  file:
    path: "{{ WRITE_ROOT }}/boot/efi"
    state: directory
    recurse: true

# It is necessary to mount and bind /dev, /proc, /sys and /boot in order to execute grub-install
# and install GRUB correctly within the {{ volume_drive }} using chroot

# XXX: ansible mount module requires fstype so it cannot be used for binding an already
# mounted location, we get to use mount directly at least for /boot
- name: Mount and bind /dev /proc /sys and {{ WRITE_ROOT }}/boot to {{ INSTALL_ROOT }}
  shell: mount --bind /dev {{ INSTALL_ROOT }}/dev &&
          mount --bind /proc {{ INSTALL_ROOT }}/proc &&
          mount --bind /sys {{ INSTALL_ROOT }}/sys &&
          mount --bind {{ WRITE_ROOT }} {{ INSTALL_ROOT }}/boot

- name: Mount ESP partition
  command: chroot {{ INSTALL_ROOT }} mount {{ ESP_PARTITION }} /boot/boot/efi

- name: Create EFI directory
  file:
    path: "{{ WRITE_ROOT }}/boot/efi/EFI/{{ item }}"
    state: directory
    recurse: true
  with_items:
    - BOOT
    - VyOS

- name: Install GRUB in the boot sector of {{ volume_drive }}
  command: chroot {{ INSTALL_ROOT }} grub-install --no-floppy --root-directory=/boot --efi-directory=/boot/boot/efi --target=x86_64-efi {{ volume_drive }}
  args:
    creates: "{{ INSTALL_ROOT }}/boot/grub/grubenv"

- name: Copy EFI boot image
  copy:
    src: "{{ WRITE_ROOT }}/boot/efi/EFI/VyOS/grubx64.efi"
    remote_src: true
    dest: "{{ WRITE_ROOT }}/boot/efi/EFI/BOOT/BOOTX64.EFI"

- name: Unmount ESP partition
  command: chroot {{ INSTALL_ROOT }} umount /boot/boot/efi

- name: Configure GRUB for AWS EC2
  template:
    src: templates/boot/grub/grub.cfg.j2
    dest: "{{ WRITE_ROOT }}/boot/grub/grub.cfg"
    mode: 0644

- name: Create the persistence config
  template:
    src: templates/persistence.conf
    dest: "{{ WRITE_ROOT }}/persistence.conf"
    mode: 0644

# ---- Unmount all mounts ----

- name: Unmount {{ INSTALL_ROOT }}/boot
  mount:
    name: "{{ INSTALL_ROOT }}/boot"
    src: "{{ WRITE_ROOT }}"
    fstype: none
    state: unmounted

- name: Unmount {{ INSTALL_ROOT }}/sys, {{ INSTALL_ROOT }}/proc, {{ INSTALL_ROOT }}/dev
  mount:
    name: "{{ INSTALL_ROOT }}/{{ item }}"
    src: "/{{ item }}"
    fstype: none
    state: unmounted
  with_items: [ 'sys', 'proc', 'dev' ]

- name: Unmount {{ INSTALL_ROOT }}
  mount:
    name: "{{ INSTALL_ROOT }}"
    src: overlayfs
    fstype: overlayfs
    state: unmounted

- name: Unmount {{ READ_ROOT }}
  mount:
    name: "{{ READ_ROOT }}"
    src: "{{ WRITE_ROOT }}/boot/{{ version_string.stdout }}/{{ version_string.stdout }}.squashfs"
    fstype: squashfs
    state: unmounted

- name: Unmount {{ WRITE_ROOT }}
  mount:
    name: "{{ WRITE_ROOT }}"
    src: "{{ ROOT_PARTITION }}"
    fstype: "{{ ROOT_FSTYPE }}"
    state: unmounted

- name: Unmount {{ CD_SQUASH_ROOT }}
  mount:
    name: "{{ CD_SQUASH_ROOT }}"
    src: "{{ SQUASHFS_IMAGE }}"
    fstype: squashfs
    state: unmounted

- name: Unmount {{ CD_ROOT }}
  mount:
    name: "{{ CD_ROOT }}"
    src: "{{ vyos_iso_local }}"
    fstype: iso9660
    state: unmounted
